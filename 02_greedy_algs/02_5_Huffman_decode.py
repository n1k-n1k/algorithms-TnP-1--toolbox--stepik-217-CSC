'''
Декодирование Хаффмана

Восстановите строку по её коду и беспрефиксному коду символов.

В первой строке входного файла заданы два целых числа kk и ll через пробел —
количество различных букв, встречающихся в строке, и размер получившейся
закодированной строки, соответственно. В следующих kk строках записаны коды
букв в формате "letter: code".
Ни один код не является префиксом другого.
Буквы могут быть перечислены в любом порядке.
В качестве букв могут встречаться лишь строчные буквы латинского алфавита;
каждая из этих букв встречается в строке хотя бы один раз.
Наконец, в последней строке записана закодированная строка.
Исходная строка и коды всех букв непусты.
Заданный код таков, что закодированная строка
имеет минимальный возможный размер.

В первой строке выходного файла выведите строку ss.
Она должна состоять из строчных букв латинского алфавита.
Гарантируется, что длина правильного ответа не превосходит 10^4 символов.
'''


def decode(enc_str, dec_dict):
    start = 0
    delta = 1
    decoded = []

    while start + delta <= len(enc_str):
        code = enc_str[start:start + delta]
        while code not in dec_dict:
            delta += 1
            code = enc_str[start:start + delta]
        decoded.append(dec_dict[code])
        start += delta
        delta = 1

    return ''.join(decoded)


def main():
    dict_len = int(input().split()[0])
    decode_dict = dict()

    for _ in range(dict_len):
        sym, code = input().split(': ')
        decode_dict[code] = sym

    encoded_str = input()
    print(decode(encoded_str, decode_dict))


if __name__ == '__main__':
    main()
